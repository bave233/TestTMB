//
//  MainScreenWorker.swift
//  TMBCurrencyGo
//
//  Created by Ratchanon.Int on 1/2/2564 BE.
//  Copyright (c) 2564 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Alamofire
import Moya
import UIKit

class MainScreenWorker {
    let provider = MoyaProvider<CurrencyService>()
    func getAllCurrency(completion: @escaping (Result<CurrencyResponse, CurrencyErorrResponse>) -> Void) {
        provider.request(CurrencyService.getCurrencies) { result in
            switch result {
            case .success(let data):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    let data = try decoder.decode(CurrencyResponse.self, from: data.data)
                    completion(.success(data))
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            case .failure(let erorr):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    if let ereorData = erorr.response?.data {
                        let data = try decoder.decode(CurrencyErorrResponse.self, from: ereorData)
                        completion(.failure(data))
                    } else {
                        completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                    }
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            }
        }
    }

    func getCovertCurrency(amount: String, from: String, to: String, completion: @escaping (Result<CovertCurrencyResponse, CurrencyErorrResponse>) -> Void) {
        provider.request(CurrencyService.getCovertCurrencies(amount: amount, from: from, to: to)) { result in
            switch result {
            case .success(let data):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    let data = try decoder.decode(CovertCurrencyResponse.self, from: data.data)
                    completion(.success(data))
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            case .failure(let erorr):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    if let ereorData = erorr.response?.data {
                        let data = try decoder.decode(CurrencyErorrResponse.self, from: ereorData)
                        completion(.failure(data))
                    } else {
                        completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                    }
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            }
        }
    }

    func getRatesCurrency(completion: @escaping (Result<RatesCurrencyResponse, CurrencyErorrResponse>) -> Void) {
        provider.request(CurrencyService.getRatesCurrencies) { result in
            switch result {
            case .success(let data):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    let data = try decoder.decode(RatesCurrencyResponse.self, from: data.data)
                    completion(.success(data))
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            case .failure(let erorr):
                do {
                    let decoder = JSONDecoder()
                    decoder.dateDecodingStrategy = .iso8601
                    if let ereorData = erorr.response?.data {
                        let data = try decoder.decode(CurrencyErorrResponse.self, from: ereorData)
                        completion(.failure(data))
                    } else {
                        completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                    }
                } catch {
                    completion(.failure(CurrencyErorrResponse(valid: false, error: CurrencyErorrResponse.Error(code: 999, message: "JSONError"))))
                }
            }
        }
    }
}
